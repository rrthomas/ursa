Hak {
  Program = Atom*

  Atom
    = "(" Stmt ")"      -- stmt
    | List
    | Object
    | Map
    | Literal
    | symbol

  Stmt
    = "let" ParamList Atom     -- let
    | "fn" ParamList Atom      -- fn
    | "fexpr" ParamList Atom   -- fexpr
    | "prop" symbol Atom Atom* -- prop
    | "quote" symbol           -- quote
    | Atom Atom*               -- call

  ParamList = "[" symbol* "]"

  List = "[" Atom* "]"

  Object = "{" PropertyValue* "}"
  PropertyValue = symbol ":" Atom

  Map = "{" KeyValue* "}"
  KeyValue = Atom ":" Atom

  Literal
    = "null"             -- null
    | bool
    | number
    | string

  symbol
    = letter alnum*      -- alphanum
    | sign+              -- punct
  sign = "_" | "+" | "-" | "/" | "*" | ">" | "<" | "=" | "!" | "?" | "~"

  bool  (a boolean)
    = "false" | "true"

  number  (a number)
    = digit* "." digit+  -- fract
    | digit+             -- whole

  string
    = "\"" doubleStringCharacter* "\""
  doubleStringCharacter
    = ~("\"" | "\\" | lineTerminator) any -- nonEscaped
    | "\\" escapeSequence                 -- escaped
  escapeSequence
    = unicodeEscapeSequence
    | hexEscapeSequence
    | characterEscapeSequence  // Must come last.
  characterEscapeSequence
    = singleEscapeCharacter
    | nonEscapeCharacter
  singleEscapeCharacter =
    "\"" | "\\" | "b" | "f" | "n" | "r" | "t" | "v"
  nonEscapeCharacter
    = ~(escapeCharacter | lineTerminator) any
  escapeCharacter
    = singleEscapeCharacter | digit | "x" | "u"
  hexEscapeSequence
    = "x" hexDigit hexDigit
  unicodeEscapeSequence
    = "u" hexDigit hexDigit hexDigit hexDigit
  lineTerminator
    = "\n" | "\r" | "\u2028" | "\u2029"
  lineTerminatorSequence
    = "\n" | "\r" ~"\n" | "\u2028" | "\u2029" | "\r\n"

  comment
    = ";" (~lineTerminator any)*

  space := whitespace | lineTerminator | comment

  whitespace
    = "\t"
    | "\x0B"    -- verticalTab
    | "\x0C"    -- formFeed
    | " "
    | "\u00A0"  -- noBreakSpace
    | "\uFEFF"  -- byteOrderMark
    | unicodeSpaceSeparator

  unicodeSpaceSeparator
    = "\u2000".."\u200B" | "\u3000"
}
