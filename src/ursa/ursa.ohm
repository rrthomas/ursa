Ursa {
  Sequence
    = "let" ident "=" Exp #sc Sequence        -- let
    | "let" NamedFn #sc Sequence              -- letfn
    | "use" ListOf<ident, #"."> #sc Sequence  -- use
    | Exp #sc Sequence                        -- seq
    | /* nothing */                           -- empty

  // A semicolon is "automatically inserted" if a newline or the end of the input stream is
  // reached, or the offending token is "}".
  // NOTE: Applications of this rule *must* appear in a lexical context -- either in the body of a
  // lexical rule, or inside `#()`.
  sc = space* (";" | end)
     | spacesNoNL (lineTerminator | &"}")

  // Optional comma for comma-separated lists.
  maybeCommaParen = space* ("," | &")")
  maybeCommaBracket = space* ("," | &"]")
  maybeCommaBrace = space* ("," | &"}")

  PrimaryExp
    = "null"            -- null
    | bool
    | string
    | number
    | "continue"        -- continue
    | ident             -- ident
    | List
    | Object
    | Map
    | Block
    | "(" Exp ")"       -- paren

  List = "[" ListOf<AssignmentExp, ","> #maybeCommaBracket "]"

  Object = "{" ListOf<PropertyValue, ","> #maybeCommaBrace "}"
  PropertyValue = ident ":" Exp

  Map = "{" ListOf<KeyValue, ","> #maybeCommaBrace "}"
  KeyValue = Exp ":" Exp

  PropertyExp
    = PropertyExp "[" Exp "]"           -- index
    | PropertyExp #"." #ident           -- property
    | Fn
    | PrimaryExp

  CallExp
    = CallExp "[" Exp "]"   -- index
  	| CallExp #"." #ident   -- prop
    | PropertyExp Arguments -- propcall
    | CallExp Arguments     -- call

  Arguments = "(" ListOf<Exp, ","> #maybeCommaParen ")"

  LvalueExp
    = CallExp
    | PropertyExp

  If
    = "if" Exp Block ("else" Block)?

  Fn
    = "fn" "(" ListOf<ident, ","> #maybeCommaParen ")" Block        -- anon
    | NamedFn

  NamedFn = "fn" ident "(" ListOf<ident, ","> #maybeCommaParen ")" Block

  Loop = "loop" Block

  UnaryExp
    = "break" Exp?      -- break
    | "return" Exp?     -- return
    | "not" Exp         -- not
    | "+" Exp           -- pos
    | "-" Exp           -- neg
    | LvalueExp

  ExponentExp
    = UnaryExp "**" ExponentExp  -- power
    | UnaryExp

  ProductExp
    = ProductExp "*" ExponentExp  -- times
    | ProductExp "/" ExponentExp  -- divide
    | ProductExp "%" ExponentExp  -- mod
    | ExponentExp

  ArithmeticExp
    = ArithmeticExp "+" ProductExp  -- plus
    | ArithmeticExp "-" ProductExp  -- minus
    | ProductExp

  CompareExp
    = CompareExp "==" ArithmeticExp -- eq
    | CompareExp "!=" ArithmeticExp -- neq
    | CompareExp "<"  ArithmeticExp -- lt
    | CompareExp "<=" ArithmeticExp -- leq
    | CompareExp ">"  ArithmeticExp -- gt
    | CompareExp ">=" ArithmeticExp -- geq
    | ArithmeticExp

// FIXME: Bitwise expressions come here

  LogicExp
    = LogicExp "and" CompareExp -- and
    | LogicExp "or" CompareExp  -- or
    | CompareExp

  AssignmentExp
    = LvalueExp "=" AssignmentExp -- ass
    | LogicExp

  Exp
    = If
    | Loop
    | AssignmentExp

  Block = "{" Sequence "}"

  ident = letter alnum*

  bool = "false" | "true"

  number
    = digit* "." digit+  -- fract
    | digit+             -- whole

  string = "\"" stringCharacter* "\""
  stringCharacter
    = ~("\"" | "\\" | lineTerminator) any -- nonEscaped
    | "\\" escapeSequence                 -- escaped
  escapeSequence
    = unicodeEscapeSequence
    | hexEscapeSequence
    | characterEscapeSequence  // Must come last.
  characterEscapeSequence
    = singleEscapeCharacter
    | nonEscapeCharacter
  singleEscapeCharacter =
    "\"" | "\\" | "b" | "f" | "n" | "r" | "t" | "v"
  nonEscapeCharacter
    = ~(escapeCharacter | lineTerminator) any
  escapeCharacter
    = singleEscapeCharacter | digit | "x" | "u"
  hexEscapeSequence
    = "x" hexDigit hexDigit
  unicodeEscapeSequence
    = "u" hexDigit hexDigit hexDigit hexDigit
  lineTerminator
    = "\n" | "\r" | "\u2028" | "\u2029"
  lineTerminatorSequence
    = "\n" | "\r" ~"\n" | "\u2028" | "\u2029" | "\r\n"

  comment = "//" (~lineTerminator any)*

  // Override Ohm's built-in definition
  space := whitespace | lineTerminator | comment

  // Does not accept lineTerminators
  spacesNoNL = (whitespace | comment)*

  whitespace
    = "\t"
    | "\x0B"    -- verticalTab
    | "\x0C"    -- formFeed
    | " "
    | "\u00A0"  -- noBreakSpace
    | "\uFEFF"  -- byteOrderMark
    | unicodeSpaceSeparator

  unicodeSpaceSeparator = "\u2000".."\u200B" | "\u3000"
}
